import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest'
import { SiteBlockerMain } from './SiteBlockerMain'
import fs from 'fs/promises'
import path from 'path'
import os from 'os'

class TestDatabase {
  private state: Map<string, any> = new Map()

  saveState(commandId: string, state: any): void {
    this.state.set(commandId, state)
  }

  loadState(commandId: string): any | null {
    return this.state.get(commandId)
  }
} 

describe('SiteBlockerMain', () => {
  let siteBlocker: SiteBlockerMain
  let tempHostsDirectory: string
  
  // beforeEach(async () => {
  //   // Create a temporary hosts file for testing
  //   tempHostsDirectory = path.join(os.tmpdir(), `site-blocker-test-${Date.now()}`)
  //   await fs.mkdir(tempHostsDirectory, { recursive: true })

  //   const tempHostsPath = path.join(tempHostsDirectory, 'hosts')
  //   await fs.writeFile(tempHostsPath, '# Original hosts content\n127.0.0.1 localhost\n')

  //   const hostsTemplatePath = path.join(tempHostsDirectory, `hosts-template`)
  //   await fs.writeFile(hostsTemplatePath, '# Generated By site blocker\n')

  //   const blocklistFilename = path.join(tempHostsDirectory, `blocklist`)
  //   await fs.writeFile(blocklistFilename, 'facebook.com\ntwitter.com')

  //   const permanentBlocklistFilename = path.join(tempHostsDirectory, `permanent-blocklist`)
  //   await fs.writeFile(permanentBlocklistFilename, '')
    
  //   // Initialize SiteBlocker with temp hosts file
  //   siteBlocker = new SiteBlockerMain(
  //     new TestDatabase(), 
  //     {
  //       timeLimit: 60,
  //       weekendTimeLimit: 120,
  //       hostsTemplate: hostsTemplatePath,
  //       blocklistFilename: blocklistFilename,
  //       permanentBlocklistFilename: permanentBlocklistFilename,
  //       hostsFilePath: tempHostsPath
  //     }
  //   );
  // })

  // afterEach(async () => {
  //   // Cleanup temp file after each test
  //   try {
  //     await fs.rmdir(tempHostsDirectory, { recursive: true});
  //   } catch (error) {
  //     console.error('Error cleaning up temp hosts directory:', error)
  //   }
  // })

  // describe('hosts file manipulation', () => {
  //   it('should add entries to hosts file when blocking sites', async () => {
  //     await siteBlocker.toggleBlock()
      
  //     const hostsContent = await fs.readFile(tempHostsPath, 'utf-8')
  //     expect(hostsContent).toContain('127.0.0.1 facebook.com')
  //     expect(hostsContent).toContain('127.0.0.1 www.facebook.com')
  //   })
  // })
}) 